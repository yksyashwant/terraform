1. what is Terraform?
	Terraform is an infrastructure as code tool that lets you define both cloud and on-prem resources human readable configuration files 
	that you can version, reuse and share. 
	Terraform is HashiCorp's infrastructure as code tool.

2.  Terraform Key Concepts:

	Providers: Providers are responsible for managing various types of infrastructure resources, such as AWS, Azure, Google Cloud, etc.

	Resources: Resources are the individual infrastructure components you manage using Terraform, like virtual machines, databases, networks, etc.

	Variables: Variables allow you to parameterize your configurations, making them more flexible and reusable.

	Modules: Modules are reusable configurations that encapsulate a set of resources and can be used across different projects.

	State: Terraform keeps track of the state of your infrastructure in a state file, which helps it understand the current state of your resources and 
	what changes need to be applied.
	
	Plan and Apply: Terraform's "plan" command shows you what changes will be made to your infrastructure before actually applying them using the "apply" command.

3. Terraform Basic Workflow ?  The core Terraform workflow consists three stages.


	Configuration: Write your infrastructure code in Terraform's HCL syntax.
	Initialization: Run 'terraform init' to download required providers and set up the environment.
	Planning: Run 'terraform plan' to see what changes will be applied to your infrastructure.
	Deployment: Run 'terraform apply' to apply the planned changes and create/update resources.
	Management: As your infrastructure evolves, you can update your code and apply changes using the same process.

	Write - Define resources which may be across multiple cloud providers.
	Plan - Terraform creates an execution plan describing 	the infrastructure it will create, update or destroy.
	Apply - On Approval, Terraform performs the proposed operation in the current order.

	Terraform's configuration language is declarative, meaning that it describes the desired end-state for your infrastructure, 
	in contrast to procedural programming languages that require step-by-step instructions to perform tasks.
	Terraform providers automatically calculate dependencies between resources to create or destroy them in the correct order.
	
4. Best Practices:

	Use version control (like Git) to manage your Terraform code.
	Use variables and parameterization for flexibility.
	Divide your configurations into modules for reusability.
	Implement proper naming conventions for resources.
	Regularly back up and secure your Terraform state files.


5. Using Terraform has several advantages over manually managing your infrastructure:

	Terraform can manage infrastructure on multiple cloud platforms.
	The human-readable configuration language helps you write infrastructure code quickly.
	Terraform's state allows you to track resource changes throughout your deployments.
	You can commit your configurations to version control to safely collaborate on infrastructure.

6. How does Terraform works?
	Terraform creates and manages the resources by using APIs.HashiCorp and the Terraform community has written thousands of providers 
	to manage many different types of resources and services. You can find all the providers  on the Terraform Registry.


7. To deploy infrastructure with Terraform:

	Scope - Identify the infrastructure for your project.
	Author - Write the configuration for your infrastructure.
	Initialize - Install the plugins Terraform needs to manage the infrastructure.
	Plan - Preview the changes Terraform will make to match your configuration.
	Apply - Make the planned changes.

8. How to track the infrastructure? or what is state file?

	Terraform keeps track of your real infrastructure in a state file, which acts as a source of truth for your environment. 
	Terraform uses the state file to determine the changes to make to your infrastructure so that it will match your configuration.

9. how to install terraform ?
	Follow the below link to install Terraform 
		https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli

10. Why Terraform?
The main purpose of the Terraform language is declaring resources, which represent infrastructure objects.

11.  What is Terrraform configuration ?
A Terraform configuration is a complete document in the Terraform language that tells Terraform how to manage a given collection of infrastructure. 
  A configuration can consist of multiple files and directories.  

The syntax of the Terraform language consists of only a few basic elements:

resource "aws_vpc" "main" {
  cidr_block = var.base_cidr_block
}

<BLOCK TYPE> "<BLOCK LABEL>" "<BLOCK LABEL>" {
  # Block body
  <IDENTIFIER> = <EXPRESSION> # Argument
}

Blocks are containers for other content and usually represent the configuration of some kind of object, like a resource. Blocks have a block type, 
can have zero or more labels, and have a body that contains any number of arguments and nested blocks. Most of Terraform's features are controlled by 
top-level blocks in a configuration file.
    
    Arguments assign a value to a name. They appear within blocks.
    
    Expressions represent a value, either literally or by referencing and combining other values. They appear as values for arguments, or within other expressions.


The Terraform language is declarative, describing an intended goal rather than the steps to reach that goal. The ordering of blocks and the files 
they are organized into are generally not significant; Terraform only considers implicit and explicit relationships between resources 
when determining an order of operations.


Example 

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 1.0.4"
    }
  }
}

variable "aws_region" {}

variable "base_cidr_block" {
  description = "A /16 CIDR range definition, such as 10.1.0.0/16, that the VPC will use"
  default = "10.1.0.0/16"
}

variable "availability_zones" {
  description = "A list of availability zones in which to create subnets"
  type = list(string)
}

provider "aws" {
  region = var.aws_region
}

resource "aws_vpc" "main" {
  # Referencing the base_cidr_block variable allows the network address
  # to be changed without modifying the configuration.
  cidr_block = var.base_cidr_block
}

resource "aws_subnet" "az" {
  # Create one subnet for each given availability zone.
  count = length(var.availability_zones)

  # For each subnet, use one of the specified availability zones.
  availability_zone = var.availability_zones[count.index]

  # By referencing the aws_vpc.main object, Terraform knows that the subnet
  # must be created only after the VPC is created.
  vpc_id = aws_vpc.main.id

  # Built-in functions and operators can be used for simple transformations of
  # values, such as computing a subnet address. Here we create a /20 prefix for
  # each subnet, using consecutive addresses for each availability zone,
  # such as 10.1.16.0/20 .
  cidr_block = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index+1)
}



	References 
	HashiCorp's official documentation: https://www.terraform.io/docs/index.html
	terraform with ec2 instance
	https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-build
	Associates tutorial list 
	https://developer.hashicorp.com/terraform/tutorials/certification-associate-tutorials-003
	Terraform Language Document 
	https://developer.hashicorp.com/terraform/language
	write configuration files
	https://developer.hashicorp.com/terraform/tutorials/configuration-language
