1. what is Terraform?
	Terraform is an infrastructure as code tool that lets you define both cloud and on-prem resources human readable configuration files 
	that you can veerrsion, reuse and share. 
	Terraform is HashiCorp's infrastructure as code tool.

2.  Terraform Key Concepts:

	Providers: Providers are responsible for managing various types of infrastructure resources, such as AWS, Azure, Google Cloud, etc.

	Resources: Resources are the individual infrastructure components you manage using Terraform, like virtual machines, databases, networks, etc.

	Variables: Variables allow you to parameterize your configurations, making them more flexible and reusable.

	Modules: Modules are reusable configurations that encapsulate a set of resources and can be used across different projects.

	State: Terraform keeps track of the state of your infrastructure in a state file, which helps it understand the current state of your resources and 
	what changes need to be applied.
	
	Plan and Apply: Terraform's "plan" command shows you what changes will be made to your infrastructure before actually applying them using the "apply" command.

3. Terraform Basic Workflow ?  The core Terraform workflow consists three stages.


	Configuration: Write your infrastructure code in Terraform's HCL syntax.
	Initialization: Run 'terraform init' to download required providers and set up the environment.
	Planning: Run 'terraform plan' to see what changes will be applied to your infrastructure.
	Deployment: Run 'terraform apply' to apply the planned changes and create/update resources.
	Management: As your infrastructure evolves, you can update your code and apply changes using the same process.

	Write - Define resources which may be across multiple cloud providers.
	Plan - Terraform creates an execution plan describing 	the infrastructure it will create, update or destroy.
	Apply - On Approval, Terraform performs the proposed operation in the current order.

	Terraform's configuration language is declarative, meaning that it describes the desired end-state for your infrastructure, 
	in contrast to procedural programming languages that require step-by-step instructions to perform tasks.
	Terraform providers automatically calculate dependencies between resources to create or destroy them in the correct order.
	
4. Best Practices:

	Use version control (like Git) to manage your Terraform code.
	Use variables and parameterization for flexibility.
	Divide your configurations into modules for reusability.
	Implement proper naming conventions for resources.
	Regularly back up and secure your Terraform state files.


5. Using Terraform has several advantages over manually managing your infrastructure:

	Terraform can manage infrastructure on multiple cloud platforms.
	The human-readable configuration language helps you write infrastructure code quickly.
	Terraform's state allows you to track resource changes throughout your deployments.
	You can commit your configurations to version control to safely collaborate on infrastructure.

6. How does Terraform works?
	Terraform creates and manages the resources by using APIs.HashiCorp and the Terraform community has written thousands of providers 
	to manage many different types of resources and services. You can find all the providers  on the Terraform Registry.


To deploy infrastructure with Terraform:

	Scope - Identify the infrastructure for your project.
	Author - Write the configuration for your infrastructure.
	Initialize - Install the plugins Terraform needs to manage the infrastructure.
	Plan - Preview the changes Terraform will make to match your configuration.
	Apply - Make the planned changes.

3.How to track the infrastructure? or what is state file?

	Terraform keeps track of your real infrastructure in a state file, which acts as a source of truth for your environment. 
	Terraform uses the state file to determine the changes to make to your infrastructure so that it will match your configuration.

4. how to install terraform ?
	Follow the below link to install Terraform 
		https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
	


	References 
	HashiCorp's official documentation: https://www.terraform.io/docs/index.html
	terraform with ec2 instance
	https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-build
	Associates tutorial list 
	https://developer.hashicorp.com/terraform/tutorials/certification-associate-tutorials-003
	Terraform Language Document 
	https://developer.hashicorp.com/terraform/language
	write configuration files
	https://developer.hashicorp.com/terraform/tutorials/configuration-language
